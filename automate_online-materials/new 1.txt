You got next csv:
id,age,sex,height,weight,ap_hi,ap_lo,cholesterol,gluc,smoke,alco,active,cardio
0,18393,2,168,62.0,110,80,1,1,0,0,1,0
1,20228,1,156,85.0,140,90,0,1,0,0,1,1
2,18857,1,165,64.0,130,70,0,1,0,0,0,1
3,17623,2,169,82.0,150,100,1,1,0,0,1,1
4,17474,1,156,56.0,100,60,1,1,0,0,0,0
8,21914,1,151,67.0,120,80,0,0,0,0,0,0
9,22113,1,157,93.0,130,80,0,1,0,0,1,0
12,22584,2,178,95.0,130,90,0,0,0,0,1,1
13,17668,1,158,71.0,110,70,1,1,0,0,1,0
14,19834,1,164,68.0,110,60,1,1,0,0,0,0
15,22530,1,169,80.0,120,80,1,1,0,0,1,0
16,18815,2,173,60.0,120,80,1,1,0,0,1,0
18,14791,2,165,60.0,120,80,1,1,0,0,0,0
21,19809,1,158,78.0,110,70,1,1,0,0,1,0
23,14532,2,181,95.0,130,90,1,1,1,1,1,0
24,16782,2,172,112.0,120,80,1,1,0,0,0,1
25,21296,1,170,75.0,130,70,1,1,0,0,0,0
27,16747,1,158,52.0,110,70,1,0,0,0,1,0
28,17482,1,154,68.0,100,70,1,1,0,0,0,0
29,21755,2,162,56.0,120,70,1,1,1,0,1,0

{
  'mean': [axis1, axis2, flattened],
  'variance': [axis1, axis2, flattened],
  'standard deviation': [axis1, axis2, flattened],
  'max': [axis1, axis2, flattened],
  'min': [axis1, axis2, flattened],
  'sum': [axis1, axis2, flattened]
}
|    |   age | workclass        |   fnlwgt | education   |   education-num | marital-status     | occupation        | relationship   | race   | sex    |   capital-gain |   capital-loss |   hours-per-week | native-country   | salary   |
|---:|------:|:-----------------|---------:|:------------|----------------:|:-------------------|:------------------|:---------------|:-------|:-------|---------------:|---------------:|-----------------:|:-----------------|:---------|
|  0 |    39 | State-gov        |    77516 | Bachelors   |              13 | Never-married      | Adm-clerical      | Not-in-family  | White  | Male   |           2174 |              0 |               40 | United-States    | <=50K    |
|  1 |    50 | Self-emp-not-inc |    83311 | Bachelors   |              13 | Married-civ-spouse | Exec-managerial   | Husband        | White  | Male   |              0 |              0 |               13 | United-States    | <=50K    |
|  2 |    38 | Private          |   215646 | HS-grad     |               9 | Divorced           | Handlers-cleaners | Not-in-family  | White  | Male   |              0 |              0 |               40 | United-States    | <=50K    |
|  3 |    53 | Private          |   234721 | 11th        |               7 | Married-civ-spouse | Handlers-cleaners | Husband        | Black  | Male   |              0 |              0 |               40 | United-States    | <=50K    |
|  4 |    28 | Private          |   338409 | Bachelors   |              13 | Married-civ-spouse | Prof-specialty    | Wife           | Black  | Female |              0 |              0 |               40 | Cuba             | <=50K    |
{
  'mean': [[3.0, 4.0, 5.0], [1.0, 4.0, 7.0], 4.0],
  'variance': [[6.0, 6.0, 6.0], [0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 6.666666666666667],
  'standard deviation': [[2.449489742783178, 2.449489742783178, 2.449489742783178], [0.816496580927726, 0.816496580927726, 0.816496580927726], 2.581988897471611],
  'max': [[6, 7, 8], [2, 5, 8], 8],
  'min': [[0, 1, 2], [0, 3, 6], 0],
  'sum': [[9, 12, 15], [3, 12, 21], 36]
}


Read it in Python using panda and create dataframe.
Please create graph using seaborn's catplot() and show the counts of good and bad outcomes for the cholesterol, gluc, alco, active, and smoke variables for patients with cardio=1 and cardio=0 in different panels.
There should be only two graphs, one for cardio=1 and another for cardio=0 with appropriate outcomes for cholesterol, gluc, alco, active, and smoke variables with  only one legend

Please normalize the data using Python.
If the value of cholesterol or gluc is 1, make the value 0. If the value is more than 1, make the value 1.
You have this piece of code in Python
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8,4))

# plot count of cholesterol, gluc, alco, active, and smoke variables for cardio=0
df[df['cardio']==0][['active','alco','cholesterol', 'gluc', 'smoke']].apply(pd.Series.value_counts).T.plot(kind='bar', ax=axes[0], title='Cardio=0')

# plot count of cholesterol, gluc, alco, active, and smoke variables for cardio=1
df[df['cardio']==1][['active','alco','cholesterol', 'gluc', 'smoke']].apply(pd.Series.value_counts).T.plot( kind='bar', ax=axes[1], title='Cardio=1' )

Please add code to show only one legend for both figure

Please create graph using seaborn's catplot() and show the counts of good and bad outcomes for the cholesterol, gluc, alco, active, and smoke variables for patients with cardio=1 and cardio=0 in different panels.
There should be only two graphs, one for cardio=1 and another for cardio=0 with appropriate outcomes for cholesterol, gluc, alco, active, and smoke variables with  only one legend

https://replit.com/@SrietienJokitsh/boilerplate-demographic-data-analyzer#main.py

df['ap_lo']
You have next Pandas dataframe with two columns ap_hi and ap_lo
	ap_hi	ap_lo
0	110	800
1	140	90
2	130	70
3	150	100
4	100	60
5	120	80
6	130	80
7	130	90
8	110	70
9	110	60
10	120	800
11	120	80
12	120	80
13	110	70
14	130	90
15	120	80
16	130	700
17	110	70
18	100	70
19	120	70
Just change value to 111 in column ap_lo if the value bigger than 80
Than print new dataframe with new values

0     800
1      90
2      70
3     100
4      60
5      80
6      80
7      90
8      70
9      60
10     80
11     80
12     80
13     70
14     90
15     80
16     70
17     70
18     70
19     70

You have next csv data
date,value
2016-05-09,1201
2016-05-10,2329
2016-05-11,1716
2016-05-12,10539
2016-05-13,6933
2016-05-14,3127
2016-05-15,2927
2016-05-16,2591
2016-05-17,3403
2016-05-18,5410
2016-05-19,19736
2016-05-20,17491
2016-05-21,13370
2016-05-22,13158
2016-05-23,13887
2016-05-24,15336
2016-05-25,14779
2016-05-26,18060
2016-05-27,19997
2016-05-28,19044
2016-05-29,20325
2016-05-30,16607
2016-05-31,16616
Read it as Pandas dataframe and set the index to the date column.
Show final dataframe
Now create a draw_line_plot function that uses Matplotlib to draw a line chart.
The title should be Daily freeCodeCamp Forum Page Views 5/2016-12/2019. 
The label on the x axis should be Date and the label on the y axis should be Page Views.


Ok, now create a draw_bar_plot function that draws a bar chart .
 It should show average daily page views for each month grouped by year. The legend should show month labels and have a title of Months. 
 On the chart, the label on the x axis should be Years and the label on the y axis should be Average Page Views.
 
 And finally, create a draw_box_plot function that uses Seaborn to draw two adjacent box plots.
 These box plots should show how the values are distributed within a given year or month and how it compares over time. 
 The title of the first chart should be Year-wise Box Plot (Trend) and the title of the second chart should be Month-wise Box Plot (Seasonality). 
 Make sure the month labels on bottom start at Jan and the x and y axis are labeled correctly. 
 The boilerplate includes commands to prepare the data.
 
 For draw_box_plot please make it that title of the first chart should be Year-wise Box Plot (Trend) and the title of the second chart should be Month-wise Box Plot (Seasonality).
 
 
You have next csv data:
Year,CSIRO Adjusted Sea Level,Lower Error Bound,Upper Error Bound,NOAA Adjusted Sea Level
1880,0,-0.952755905,0.952755905,
1881,0.220472441,-0.732283464,1.173228345,
1882,-0.440944881,-1.346456692,0.464566929,
1883,-0.232283464,-1.129921259,0.66535433,
1884,0.590551181,-0.283464567,1.464566928,
1885,0.531496062,-0.330708661,1.393700786,
1886,0.437007874,-0.381889763,1.255905511,
1887,0.216535433,-0.602362204,1.03543307,
1888,0.299212598,-0.519685039,1.118110235,
1889,0.362204724,-0.456692913,1.181102361,
1890,0.440944881,-0.374015748,1.255905511,
1891,0.374015748,-0.440944881,1.188976377,
1892,0.499999999,-0.31496063,1.314960629,
1893,0.685039369,-0.114173228,1.484251967,
1894,0.303149606,-0.547244094,1.153543306,
1895,0.767716535,-0.082677165,1.618110235,
1896,0.468503937,-0.366141732,1.303149605,
1897,0.673228346,-0.145669291,1.492125983,
1898,1.043307086,0.267716535,1.818897636,
1899,1.338582676,0.574803149,2.102362203,
1900,1.125984251,0.405511811,1.846456691,
1901,1.110236219,0.417322834,1.803149604,
1902,1.291338581,0.61023622,1.972440943,
1903,1.606299211,0.937007873,2.275590549,
1904,1.2007874,0.53543307,1.86614173,
1905,0.984251968,0.377952756,1.590551179,
1906,1.251968503,0.673228346,1.83070866,
1907,1.196850392,0.61023622,1.783464565,
1908,1.098425196,0.527559055,1.669291337,
1909,1.27559055,0.700787401,1.850393699,
1910,1.271653542,0.696850393,1.846456691,
1911,1.598425195,1.039370078,2.157480313,
1912,1.476377951,0.917322834,2.035433069,
1913,1.547244093,0.992125983,2.102362203,
1914,1.795275589,1.251968503,2.338582675,
1915,2.10629921,1.57086614,2.641732281,
1916,2.031496061,1.519685038,2.543307084,
1917,1.854330707,1.350393699,2.358267714,
1918,1.791338581,1.291338581,2.29133858,
1919,1.854330707,1.354330707,2.354330706,
1920,1.905511809,1.393700786,2.417322832,
1921,1.988188974,1.472440943,2.503937005,
1922,1.952755904,1.433070865,2.472440942,
1923,1.999999998,1.488188975,2.511811021,
1924,1.712598423,1.196850392,2.228346454,
1925,1.791338581,1.255905511,2.326771651,
1926,2.047244092,1.507874014,2.586614171,
1927,2.003937006,1.496062991,2.511811021,
1928,1.850393699,1.366141731,2.334645667,
1929,1.905511809,1.429133857,2.381889761,
1930,2.062992124,1.590551179,2.535433068,
1931,2.047244092,1.566929132,2.527559053,
1932,2.271653541,1.803149604,2.740157478,
1933,2.440944879,1.976377951,2.905511808,
1934,2.228346454,1.759842518,2.696850391,
1935,2.448818895,1.980314959,2.917322832,
1936,2.295275588,1.83070866,2.759842517,
1937,2.519685037,2.055118108,2.984251965,
1938,2.622047241,2.157480313,3.08661417,
1939,2.826771651,2.346456691,3.307086611,
1940,2.618110234,2.18110236,3.055118107,
1941,3.098425194,2.673228344,3.523622044,
1942,3.098425194,2.673228344,3.523622044,
1943,3.098425194,2.673228344,3.523622044,
1944,2.84645669,2.425196848,3.267716532,
1945,2.95669291,2.535433068,3.377952752,
1946,3.251968501,2.834645666,3.669291335,
1947,3.374015745,2.996062989,3.7519685,
1948,3.562992122,3.19685039,3.929133854,
1949,3.51181102,3.181102359,3.842519681,
1950,3.598425193,3.287401571,3.909448815,
1951,3.972440941,3.665354327,4.279527555,
1952,3.870078736,3.56692913,4.173228342,
1953,4.043307082,3.748031492,4.338582673,
1954,3.929133854,3.64173228,4.216535429,
1955,3.964566925,3.685039366,4.244094484,
1956,3.763779524,3.488188973,4.039370075,
1957,4.291338578,4.019685035,4.562992121,
1958,4.346456688,4.086614169,4.606299208,
1959,4.358267712,4.102362201,4.614173224,
1960,4.503937003,4.244094484,4.763779523,
1961,4.748031491,4.488188972,5.007874011,
1962,4.543307082,4.283464563,4.803149601,
1963,4.480314956,4.220472437,4.740157475,
1964,4.169291334,3.905511807,4.433070862,
1965,4.610236216,4.346456688,4.874015743,
1966,4.397637791,4.137795271,4.65748031,
1967,4.452755901,4.196850389,4.708661413,
1968,4.484251964,4.220472437,4.748031491,
1969,4.751968499,4.476377948,5.02755905,
1970,4.67716535,4.401574799,4.9527559,
1971,4.881889759,4.610236216,5.153543302,
1972,5.240157475,4.968503932,5.511811018,
1973,5.003937003,4.736220468,5.271653538,
1974,5.472440939,5.204724404,5.740157474,
1975,5.409448813,5.145669286,5.673228341,
1976,5.370078735,5.1023622,5.63779527,
1977,5.303149601,5.043307081,5.56299212,
1978,5.555118105,5.291338577,5.818897632,
1979,5.362204719,5.098425192,5.625984246,
1980,5.598425191,5.34251968,5.854330703,
1981,6.086614167,5.830708655,6.342519679,
1982,5.858267711,5.610236215,6.106299206,
1983,6.188976372,5.93307086,6.444881883,
1984,6.153543301,5.905511805,6.401574797,
1985,5.74803149,5.499999994,5.996062986,
1986,5.771653537,5.523622042,6.019685033,
1987,5.795275585,5.551181097,6.039370073,
1988,5.980314955,5.732283459,6.22834645,
1989,6.157480309,5.905511805,6.409448812,
1990,6.232283458,5.972440939,6.492125978,
1991,6.334645663,6.074803143,6.594488182,
1992,6.35826771,6.094488183,6.622047237,
1993,6.291338576,6.027559049,6.555118104,6.297493046
1994,6.499999993,6.236220466,6.763779521,6.310933553
1995,6.618110229,6.354330702,6.881889757,6.452568661
1996,6.787401568,6.523622041,7.051181095,6.62763131
1997,7.066929127,6.803149599,7.330708654,6.733920367
1998,6.665354324,6.393700781,6.937007867,6.865806069
1999,7.011811016,6.736220466,7.287401567,6.848689771
2000,7.062992119,6.791338576,7.334645662,6.920582014
2001,7.287401567,7.019685032,7.555118103,7.087460011
2002,7.381889756,7.110236213,7.653543299,7.319697525
2003,7.759842512,7.484251961,8.035433063,7.488352718
2004,7.740157472,7.464566922,8.015748023,7.507932839
2005,7.74409448,7.472440937,8.015748023,7.644563144
2006,7.917322827,7.645669284,8.18897637,7.697420009
2007,7.996062984,7.712598417,8.279527551,7.70214715
2008,8.350393692,8.078740149,8.622047235,7.90736541
2009,8.586614164,8.311023614,8.862204715,8.04635409
2010,8.901574794,8.618110227,9.185039361,8.122972567
2011,8.96456692,8.661417314,9.267716526,8.053065004
2012,9.326771644,8.992125975,9.661417313,8.457057629
2013,8.980314951,8.622047235,9.338582668,8.546648227

Use the data to complete next two tasks:
    Use Pandas to import the data from this csv.
    Use matplotlib to create a scatter plot using the Year column as the x-axis and the CSIRO Adjusted Sea Level column as the y-axis.
	
U trouglu ABC date su stranice AB, BC i visina BB1 iz temena B, tako da je AB=20cm, BC=15cm i BB1=12cm.
Odredi ugao ABC.
 
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
